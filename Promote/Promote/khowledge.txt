{

1. 分类里的计算属性，也不可被override
2. 分类里的类方法，不可以被override
3. 类里的类方法，static修饰时，不可被override；用class修饰时，可被override


}

1. 只有使用闭包方式创建出的对象才只会创建一次 ，如：

var autoLoginLab: UILabel = {
    let lab = UILabel()
    return lab
}()

而 var autoLoginLab: UILabel {
    let lab = UILabel()
    return lab
}   则每次调用都会重新创建一次


2. iPhone X 尺寸：
#define IS_IPHONE_X (Screen_Height == 812.0f) ? YES : NO

1.导航栏高度 88 非非IPoneX手机为64
2.状态栏高度44 非IPoneX手机为20
3.tabar高度83 非IPhoneX手机为49  如下图所示；

3. setValue:forKey 与value:forKey 必须配对后使用


3. setValue:forKey 与value:forKey 必须配对后使用

4. 控制器a通过 在touchesBegan时present 出 控制器b, 则在b控制器里点击页面的话还是会对于控制器a的touchesBegan方法的（前提是b为实现touchesBegan方法），这是事件传递，即事件由屏幕离用户最近的地方网远处传，和寻找响应者正好相反。即若控制器a实现了touchesBegan方法，则，点击b页面时，不会再出发控制器a的touchesBegan方法
5. OS X Server搭建Bots持续集成环境
6. 控制器a push或present出控制器b，a都不会被释放，除非rootViewcontroller由1变为1‘。

7. Rxswift： Map 与 FlatMap，merge()， 参考： https://www.cnblogs.com/scott-mr/p/7234769.html#5

8. opaque也是表示当前的UIView的不透明度，设置是否之后对于UIView的显示并没有什么影响,官方文档的意思简单点说就是opaque默认为YES，如果alpha小于1，那么应该设置opaque设置为NO.  alpha 的开销比hidden大，所以，隐藏，用hidden即可。
9. UIImageView是专门为显示图片做的控件，用了最优显示技术，所以不让调用darwrect方法。所以我们如果写了一个UIImageView的子类里面重写了drawRect方法是不会被调用的. 因为UIImageView的drawRect方法永远不会调（即使是外部主动setNeedsDisplay也没用），所以，获取不到上下文，故此时需要自行创建

10. 若有时po 打印时会立马crash，则将build setting里的optimization （带level的）release改为 None即可；或将project的build command-line tool 改为debug

11. clipsToBounds是对view的切割，masksToBounds是对layer的切割. label要想有圆角必须设置其一，而其他UIview子类型则不用
12. 使用shadowColor时，原view必须设置背景色且shadowOpacity必须设置为!= 0，且shadowOffset还需要微调.

13. 关于share extension 即ios8 插件扩展开发
    13.1 Document Types:
    name:这个可以随便填写
    types:支持类型文件,为了省事可以在下面两个中选择
    public.data: 打开大多数文件[文件夹除外],例如: .db, .dat , 包含public.content的全部
    public.content: 打开一些简单文件时候,例如: png,jpg,plist,文档,表格,html等
    icon:可以添加也可以不添加

    ExportedUtls:
    Identifier:必填,为项目的Bundle Identifier

    13.2 我在Xcode中另外新建了一个分享扩展，然后把他们运行在机器上，但是不知道为什么在我的机器上（iPhone 5，iPhone 6s Plus）上都不显示，后来调了下才发现原来扩展也有它自己的deployment target，当我们把扩展的deployment target改为比我们的设备的iOS 版本低的时候就可以显示出来了，之前新建的时候没改，一直是9.1，我的iPhone 5是8.0的，所以显示不出来。

    13.3 尽管苹果开放了Extension，但是在iOS中extension并不能单独存在，要想提交到AppStore，必须将Extension包含在一个App中提交，并且App的实现部分不能为空,这个包含Extension的App就叫Containing app。Extension会随着Containing App的安装而安装，同时随着ContainingApp的卸载而卸载。）共享的数据介质中（包括NSUserDefault、Sqlite、CoreData），要跟容器程序进行数据交互需要借助AppGroups服务

14. 加了@objc标识的方法、属性无法保证都会被运行时调用，
因为Swift会做静态优化。要想完全被动态调用，必须使用dynamic修饰。
使用dynamic修饰将会隐式的加上@objc标识.

15. Swift 3中dynamic是自带@objc，但是Swift 4中，dynamic不在包含@objc了。所以有些需要使用到@objc标明的方法，在Swift 4得补回去。
Swift 3中，如果是在Objective-C中使用上述的代码，那么是可以成功调用到foo.a和[foo testA]的。在对应的xxx-Swift.h文件中，也可以看到相关的转换成Objective-C的代码。但是！！！在Swift 4，这些都不成立了。如果要使用，那么需要标上@objcMembers或者@objc。也就是——

class Foo {
@objcMembers let a : Int
@objcMembers func testA() {}
// 又或者
@objc let b : Int
@objc func testB() {}
}
不过，文档更推荐使用@objcMembers。据悉，@objc相对于@objcMembers而来，可能会增大包的编译大小。而且，最好是在需要使用到的地方才用上@objcMembers，而不是所有都标明～～


16. 在 Swift 4 中，可以把类型和协议用 & 组合在一起作为一个类型使用，就可以像下面这样写了 let a = protocolA & structB

17. 值类型总是会使用直接派发, 简单易懂
而协议和类的 extension 都会使用直接派发
NSObject 的 extension 会使用消息机制进行派发
NSObject 声明作用域里的函数都会使用函数表进行派发.
协议里声明的, 并且带有默认实现的函数会使用函数表进行派发

编译语言常见的派发机制： 直接派发、函数表派发（java默认使用）、消息机制派发（ios使用的），ios里可以通过一些关键字如final、static、协议扩展、类扩展等进行派发机制的更改

其他修饰符： @inline(__always) 修饰方法时，表示始终将其修饰为直接派发
18 .去model化的手段: 字典流，即使用原生的数据流，通过NSDictionary方式传递.
block会延长相关对象的生命周期。block在离散型场景下不符合使用的规范。因此说block没有代理好
19. 在项目开发中，只要有present出来的控制器，一定要有对应的dismiss，否则项目中会存在无法估量的内存泄漏




